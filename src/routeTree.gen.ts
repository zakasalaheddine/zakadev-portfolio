/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as TemplatesIndexRouteImport } from './routes/templates/index'
import { Route as StoreIndexRouteImport } from './routes/store/index'
import { Route as ServicesIndexRouteImport } from './routes/services/index'
import { Route as ComponentsIndexRouteImport } from './routes/components/index'
import { Route as AiAutomationsIndexRouteImport } from './routes/ai-automations/index'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const TemplatesIndexRoute = TemplatesIndexRouteImport.update({
  id: '/templates/',
  path: '/templates/',
  getParentRoute: () => rootRouteImport,
} as any)
const StoreIndexRoute = StoreIndexRouteImport.update({
  id: '/store/',
  path: '/store/',
  getParentRoute: () => rootRouteImport,
} as any)
const ServicesIndexRoute = ServicesIndexRouteImport.update({
  id: '/services/',
  path: '/services/',
  getParentRoute: () => rootRouteImport,
} as any)
const ComponentsIndexRoute = ComponentsIndexRouteImport.update({
  id: '/components/',
  path: '/components/',
  getParentRoute: () => rootRouteImport,
} as any)
const AiAutomationsIndexRoute = AiAutomationsIndexRouteImport.update({
  id: '/ai-automations/',
  path: '/ai-automations/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/ai-automations': typeof AiAutomationsIndexRoute
  '/components': typeof ComponentsIndexRoute
  '/services': typeof ServicesIndexRoute
  '/store': typeof StoreIndexRoute
  '/templates': typeof TemplatesIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/ai-automations': typeof AiAutomationsIndexRoute
  '/components': typeof ComponentsIndexRoute
  '/services': typeof ServicesIndexRoute
  '/store': typeof StoreIndexRoute
  '/templates': typeof TemplatesIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/ai-automations/': typeof AiAutomationsIndexRoute
  '/components/': typeof ComponentsIndexRoute
  '/services/': typeof ServicesIndexRoute
  '/store/': typeof StoreIndexRoute
  '/templates/': typeof TemplatesIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/ai-automations'
    | '/components'
    | '/services'
    | '/store'
    | '/templates'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/ai-automations'
    | '/components'
    | '/services'
    | '/store'
    | '/templates'
  id:
    | '__root__'
    | '/'
    | '/ai-automations/'
    | '/components/'
    | '/services/'
    | '/store/'
    | '/templates/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AiAutomationsIndexRoute: typeof AiAutomationsIndexRoute
  ComponentsIndexRoute: typeof ComponentsIndexRoute
  ServicesIndexRoute: typeof ServicesIndexRoute
  StoreIndexRoute: typeof StoreIndexRoute
  TemplatesIndexRoute: typeof TemplatesIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/templates/': {
      id: '/templates/'
      path: '/templates'
      fullPath: '/templates'
      preLoaderRoute: typeof TemplatesIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/store/': {
      id: '/store/'
      path: '/store'
      fullPath: '/store'
      preLoaderRoute: typeof StoreIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/services/': {
      id: '/services/'
      path: '/services'
      fullPath: '/services'
      preLoaderRoute: typeof ServicesIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/components/': {
      id: '/components/'
      path: '/components'
      fullPath: '/components'
      preLoaderRoute: typeof ComponentsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/ai-automations/': {
      id: '/ai-automations/'
      path: '/ai-automations'
      fullPath: '/ai-automations'
      preLoaderRoute: typeof AiAutomationsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AiAutomationsIndexRoute: AiAutomationsIndexRoute,
  ComponentsIndexRoute: ComponentsIndexRoute,
  ServicesIndexRoute: ServicesIndexRoute,
  StoreIndexRoute: StoreIndexRoute,
  TemplatesIndexRoute: TemplatesIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
